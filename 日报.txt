---------------2020年6月1日----------------
1、缓存首页内容
2、缓存商品分类菜单
查询商品分类时添加缓存：
	1、查询数据库之前先查询缓存。
	2、查询到结果，直接响应结果。
	3、查询不到，缓存中没有需要查询数据库。
	4、把查询结果添加到缓存中。
	5、返回结果。
向redis中添加缓存：
	Key：PROTAL_CATRESULT_KEY
	Value：商品分类菜单
注意：添加缓存不能影响正常业务逻辑。
3、缓存首页大广告位信息
向redis中添加缓存：
 使用hash对key进行归类。
 //添加到缓存
 redisClient.hset(PORTAL_AD_KEY,AD_CATEGORY_ID.toString(),adNodeList);
 ---------------2020年6月2日----------------
 1.ElasticSearch 介绍
    1.1.为什么要用ElasticSearch？
        处理海量数据(全文检索)
    1.2.ElasticSearch介绍
        ElasticSearch是一个基于Lucene的搜索服务器。
    1.3.Lucene->ES的发展
    1.4.原理与应用
        1.4.1.索引结构
        1.4.2.倒排索引
            倒排索引（Inverted index）:也常被称为反向索引，倒排索引是从关键字到文档的映射（已知关键字求文档）。
            逻辑结构部分是一个倒排索引表，由三部分组成：
            1、将搜索的文档最终以Document方式存储起来。
            2、将要搜索的文档内容分词，所有不重复的词组成分词列表。
            3、每个分词和docment都有关联。
        1.4.3.RESTful应用方法
            Elasticsearch提供 RESTful Api接口进行索引、搜索，并且支持多种客户端。
 2.安装 ElasticSearch
    2.1.环境需求
    2.2.安装ES
    2.3.配置文件
    2.4.启动ES
    2.5.测试
 3.安装Kibana
    3.1.什么是Kibana
    3.2.下载
    3.3.安装
    3.4.修改配置
    3.5.启动
    3.6.测试
 4.安装head
    4.1.什么是head
    4.2.安装
    4.3.测试
 5.ES快速入门
    5.1.index管理
        5.1.1.创建index
        5.1.2.修改index
        5.1.3.删除index
    5.2.mapping管理
        5.2.1 创建mapping
        5.2.2.查询mapping
        5.2.3.更新mapping
        5.2.4.删除mapping
    5.3.document管理
        5.3.1.创建document
            5.3.1.1.POST语法
            5.3.1.2.PUT语法
        5.3.2.查询document
        5.3.3.删除Document
    5.4.ES读写原理
        5.4.1.documnet routing（数据路由）
        5.4.2.ES document写操作原理
        5.4.3.ES document读操作原理
        5.4.4.为什么primary shard数量不可变
 6.IK分词器
    6.1.测试分词器
    6.2.中文分词器
        6.2.1.Lucene自带中文分词器
        6.2.2.第三方中文分析器
        6.3.安装IK分词器
        6.4.两种分词模式
        6.5.自定义词库
 7.field详细介绍
    7.1.field的属性介绍
        7.1.1.type： 通过type属性指定field的类型。
        7.1.2.analyzer： 通过analyzer属性指定分词模式。
        7.1.3.index： 通过index属性指定是否索引。
        7.1.4.field索引不存储
    7.2.常用field类型
        7.2.1.text文本字段
        7.2.2.keyword关键字字段
        7.2.3.date日期类型
        7.2.4.Numeric类型
    7.3.总结
        field属性的设置标准：
              	标准
        分词  	是否有意义
        索引  	是否搜索
        存储  	是否展示
8.Spring Boot整合ElasticSearch
    8.1.ES客户端
    8.2.搭建工程
        8.2.1.pom.xml
        8.2.2.application.yml
        8.2.3.config
        8.2.4.app
    8.3.索引管理
        8.3.1.创建索引库
            8.3.1.1.api
            8.3.1.2.Java Client
        8.3.2.删除索引库
            8.3.2.1.api
            8.3.2.2.java client
---------------2020年6月3日----------------
        8.3.2.添加文档
            8.3.2.1.api
            8.3.2.2.java client
        8.3.3.批量添加文档
            8.3.3.1.api
            8.3.3.2.java client
        8.3.4.修改文档
            8.3.4.1.api
            8.3.4.2.java client
        8.3.5.删除文档
            8.3.5.1.api
            8.3.4.2.java client
     8.4.文档搜索
        8.4.1.准备环境
        8.4.2.简单搜索
            8.4.2.1.api
            8.4.2.2.java client
        8.4.3.DSL搜索
            8.4.3.1.match_all查询
                8.4.3.1.1.api
                8.4.3.1.2.java client
            8.4.3.2.分页查询
                8.4.3.2.1.api
                8.4.3.2.2.java client
        8.4.4.match查询
            8.4.4.1.api
            8.4.4.2	java client
        8.4.5.multi_match查询
            8.4.5.1.api
            8.4.5.1.java client
        8.4.6.bool查询
            8.4.6.1.api
            8.4.6.2.java client
        8.4.7.filter查询
            8.4.7.1.api
            8.4.7.2.java client
        8.4.8.highlight查询
            8.4.8.1.api
            8.4.8.2.java client
---------------2020年6月4日----------------
        1.集群管理
            1.1.集群结构
            1.2.集群的三个角色
            1.3.创建结点2
            1.4.查看集群健康状态
            1.5.测试
        2、usian项目整合Elasticsearch 把数据导入索引库
---------------2020年6月5日----------------
        1、商品的搜索
        2、索引库同步
---------------2020年6月8日----------------
        1、商品详情的方案
            1.1、网页静态化方案
                1、创建商品详情的thymeleaf模板
                2、创建一个RabbitMQ的消费者，收到消息后创建静态页面
                3、搭建nginx服务器，返回静态页面
            1.2.redis缓存商品信息方案
                使用redis做缓存，业务逻辑：
                1、根据商品id到redis中查询
                      查得到，直接返回
                2、查不到，查询mysql，
                      数据放到redis中
                      设置缓存的有效期一天的时间，可以根据实际情况调整。
        2、查询商品详情
            2.2.查询商品信息
        3、缓存同步
            后台修改或删除商品时直接删除redis中的商品
        4、缓存穿透
            4.1、描述
                缓存穿透是指缓存和数据库中都没有数据，而用户不断发起请求则这些请求会穿过缓存直接访问数据库，
                如发起为id为“-1”的数据或id为特别大不存在的数据。假如有恶意攻击，就可以利用这个漏洞，对数据库造成压力，
                甚至压垮数据库。
            4.2、解决方案
                缓存空对象：
                当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间（避免控制占用更多的存储空间），
                之后再访问这个数据将会从缓存中获取，保护了后端数据源；
        5、缓存击穿
            5.1、描述
                缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个key不停进行访问，当这个key在失效的瞬间，
                持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。
            5.2、解决方案
                1. 设置热点数据永远不过期
                2. 加分布式锁
            5.3、如何释放锁？del
            5.4、业务处理失败？expire
        6、缓存雪崩
            6.1、描述
                缓存雪崩，是指在某一个时间段，缓存集中过期失效。
            6.2、解决方案
                缓存数据的过期时间设置随机，不同分类商品缓存不同周期或热门类目的商品缓存时间长一些
---------------2020年6月9日----------------
        1、单点登录介绍
            1.1、什么是单点登录
                SSO英文全称Single Sign On，单点登录，登录一次处处可用
            1.2、为什么要有单点登录系统
                集群环境下会出现要求用户多次登录的情况。
                解决方案：
                    1、配置tomcat集群(500)。配置tomcat Session复制。节点数不要超过5个。
                    2、可以使用Session服务器（sso系统），保存Session信息。需要模拟Session。
                session和redis的共同特点：
                    1、kv形式存储
                    2、过期时间
                    单点登录系统是使用redis模拟Session，实现Session的统一管理。
        2、注册信息校验
        3、用户注册
        4、用户登录
        5、通过token查询用户信息
            5.1、业务逻辑
                1、从url中取参数token
                2、根据token查询redis
                3、如果查询不到数据，前台删除cookie中的用户信息
                4、如果查询到数据，说明用户已经登录需要重置key的过期时间
        6、退出登录
---------------2020年6月10日----------------
        1、购物车分析
            1.1、购物车功能
                添加购物车商品
                展示购物车列表页面
                修改购物车商品数量
                删除购物车商品
            1.2、购物车设计
                1.2.1、用户未登录状态下：在不登陆的情况下把购物车信息写入cookie
                    优点：
                    	1、不占用服务端存储空间
                    	2、代码实现简单。
                    	3、用户体验好
                    缺点：
                    	1、cookie中保存的容量有限。最大4k
                    	2、把购物车信息保存在cookie中，更换设备购物车信息不能同步。
                1.2.2、用户已登录状态下：把购物车信息保存到服务端的 Redis 中
                    优点：
                    	1、更换设备购物车信息可以同步
                    缺点：
                   		1、占用服务端存储空间
        2、未登录状态操作购物车
            2.1.业务逻辑：
                1、从cookie中查询商品列表：Map<itemId,TbItem> 商品购买数量使用TbItem的num保存
                	    购物车已存在则直接返回
                        购物车不存在则创建空的购物车并返回
                2、添加商品到购物车：
                	如果购物车存在该商品，商品数量相加。
                	如果购物车不存在该商品，根据商品id查询商品信息并添加到购车列表
                3、把购车商品列表写入cookie。
                	读写cookie可以使用CookieUtils工具类实现
            2.2、添加购物车
            2.3、查看购物车
            2.4、修改购物车
            2.5、删除购物车
        3、登录状态操作购物车
            3.1.业务逻辑：
                1、使用redis存储商品列表：
                	使用hash对购物车进行归类
                	HASH :HASH_KEY
                           |--KEY:VALUE
                           |--KEY:VALUE
                           |--KEY:VALUE
                	HASH : CART_REDIS_KEY
                          key  id   value
                           |-- 22: [{...}]
                           |-- 23: [{...}]
                           |-- 24: [{...}]
                           |-- 25: [{...}]
            3.2、添加购物车
                1、从redis中查询商品列表。
                2、将商品添加大购物车中
                3、将购物车缓存到 redis 中
            3.3、查看购物车
            3.4、修改购物车
            3.5、删除购物车
            4、购物车同步
                4.1、业务逻辑
                    在用户未登录情况下往购物车添加商品，添加结束用户登录，此时需把cookie中的数据同步到redis：
                	    1、如果redis中有数据cookie中也有数据，需要做数据合并。相同商品数量相加，不同商品添加一个新商品。
                	    2、把cookie中的数据删除，避免下次重复同步
---------------2020年6月16日----------------
        1、订单分析
           1.1、订单功能
                1、在购物车页面点击“去结算”按钮跳转到订单确认页面
                    (1)、 展示商品列表
                2、订单确认页面需要根据用户查询配送地址，展示订单确认页面之前，应该确认用户身份
                    (1)、 如果用户未登录或登录过期跳转到登录页面
                    (2)、 登录成功后再跳转到订单确认页面
                3、提交订单
                    (1)、 生成订单
                4、扣减库存
                5、关闭超时订单
                    (1)、 定时扫描超时2天未付款的订单，并关闭订单
                    (2)、 加回库存
           1.2、创建工程
                1.2.1、创建usian_order_service
                1.2.2、创建usian_order_feign
                1.2.3、创建usian_order_web
        2.用户身份认证
            在展示订单确认页面之前，需要对用户身份进行认证，要求用户必须登录。
                2.1.功能分析
                    1、使用springmvc的拦截器拦截所有订单的请求
                    2、业务逻辑
                        2.1、  从cookie中取token。
                        2.2、 根据token调用sso服务查询用户信息。
                        2.3、 如果查不到用户信息则跳转到登录页面。
                        2.4、 查询到用户信息放行。
                2.2、usian_order_web
                    2.2.1、interceptor
                        对用户的 token 做判断
                        如果用户 token 不为空，则校验用户在 redis 中是否失效
                    2.2.2、config
                        注册拦截器
                        拦截URL
        3、展示订单确认页面
            3.1、功能分析
                1、在购物车页面点击“去结算”按钮跳转到订单确认页面。
                2、请求的url：/frontend/order/goSettlement
                3、参数：ids，userId，token
                4、查询redis中的购物车数据并返回给前端
                5、配送地址列表，需要用户登录。需要根据用户id查询收货地址列表。静态数据。
                6、支付方式。静态数据。
---------------2020年6月17日----------------
        3.提交订单
            3.1、如何生成订单号
                订单号需求是什么？
                    1、唯一
                    2、可读性高
                        纯数字
                如何生成：
                    1、时间戳
                        可能重复
                    3、时间戳 +随机数
                        可能重复
                    2、手机号
                        重复
                    4、时间戳 +自增id
                        可行（使用Redis的INCR命令完成）（初值：100544）
                    5、时间戳+用户id/手机号
                    6、时间戳+用户id +店铺id
                         可行，适用于C2C、B2C平台
            3.2、功能分析
                1、保存订单信息
                	（1）、在订单确认页面点击“提交订单”按钮生成订单。
                	（2）、请求的url：/frontend/order/insertOrder
                	（3）、参数：订单、订单商品、订单物流
                	（4）、返回值：{"status":200,"msg":"OK","data":"订单ID"}
            3.3、common_pojo
                3.3、usian_order_service
            3.4、usian_order_feign
        4、扣减库存
            4.1、分析
                将消息写入消息队列，业务逻辑以异步的方式运行，加快响应速度
            4.2、usian_order_service
            4.3、usian_item_service
            4.4、测试
                测试订单提交前后商品的库存数量
---------------2020年6月18日----------------
        5、关闭超时订单
            5.1、分析
                1、定义job扫描订单表：
                      a、修改订单的状态为关闭状态、结束时间、关闭时间、修改时间为当前时间
                      b、把订单中商品的库存数量加回去
                      扫描条件：状态是未付款 并且 创建时间 <= 当前时间 – 2天  并且付款方式为在线支付的订单
                2、  定义触发条件
                      a、理论上需要实时触发（性能问题）
                      b、1分钟触发一次 0 */1 * * * ?
        6、quartz集群任务重复执行问题
            6.1.分析
                quartz 在集群的时候，任务会出现重复执行的情况
            6.2、quartz
                使用redis分布式锁解决quartz 集群任务重复执行的问题
            6.3、测试
                拷贝usian_order_service，测试是否存在重复关闭订单的问题
---------------2020年6月19日----------------
        1、事务的介绍
            1.1、什么是事务？
                    当你需要一次执行多条SQL语句时，可以使用事务。通俗一点说，如果这几条SQL语句全部执行成功，则才对数据库进行一次更新，
                    如果有一条SQL语句执行失败，则这几条SQL语句全部不进行执行，这个时候需要用到事务。
                    去不了终点，回到原点
                数据库事务的四大特性ACID：
                    原子性（Atomicity）
                           要么都执行，要么都不执行
                    一致性（Consistency）
                           事务前后的数据都是正确的
                    隔离性（Isolation）
                          事物之间相互隔离，互不干扰（并发执行的事务彼此无法看到对方的中间状态）
                    持久性（Durability）
                           事务一旦提交不可再回滚
            1.2、本地事务
                在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，
                由于应用主要靠关系数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。
                1.2.1、数据库本身控制事物：(三种)
                    begin transaction；
                          //1.本地数据库操作：张三减少金额
                          //2.本地数据库操作：李四增加金额
                    rollback;
                    或
                    commit transation;
                1.2.2、jdbc中使用事物：
                     1、获取对数据库的连接
                     2、设置事务不自动提交（默认情况是自动提交的）
                     conn.setAutoCommit(false);   //其中conn是第一步获取的随数据库的连接对象。
                     3、把想要一次性提交的几个sql语句用事务进行提交
                     4、捕获异常，进行数据的回滚（回滚一般写在catch块中）
                1.2.3、aop控制事务：
                     1、配置事务管理器
                     2、配置事务的通知
                     3、配置切面
            1.3、分布式事务
                分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，
                这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为分布式事务，例如用户注册送积分事务、
                创建订单减库存事务，银行转账事务等都是分布式事务。
            1.4、分布式事物产生的场景
                1、典型的场景就是微服务架构 微服务之间通过远程调用完成事务操作。
                比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减库存。简言之：跨JVM进程产生分布式事务。
                2、单体系统访问多个数据库实例 当单体系统需要访问多个数据库（实例）时就会产生分布式事务。
                比如：用户信息和订单信息分别在两个MySQL实例存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据实例，需要通过不同的数据库链接去操作数据，此时产生分布式事务。 简言之：跨数据库实例产生分布式事务。
                3、多服务访问同一个数据库实例 比如：订单微服务和库存微服务即使访问同一个数据库也会产生分布式事务，
                两个微服务持有了不同的数据库链接进行数据库操作，此时产生分布式事务。简言之：跨JVM进程产生分布式事务。
        2、RabbitMQ可靠消息最终一致性介绍
            2.1、为什么要使用可靠消息最终一致性
                就是基于MQ 实现异步调用的多个服务的业务逻辑，要么一起成功，要么一起失败。
                这个时候，就要用上可靠消息最终一致性方案，来实现分布式事务。
            2.2、什么是可靠消息最终一致性
                可靠消息：消息成功消费
                最终一致性：事务参与方最终完成事务
            2.3、可靠消息最终一致性要解决的问题：
                2.3.1、上游服务把信息成功发送
                    本地消息表：消息记录表（orderId、status） + quartz（定时扫描、再发送消息）
                2.3.2、下游服务成把消息成功消费
                    持久化+手动确认方案：持久化（mq宕机消息不丢失）、手动确认（任务处理失败消息还在容器中）
                2.3.3、对消息做幂
                    消息去重表
        3、RabbitMQ实现可靠消息最终一致性
            3.1、需求说明：
                usian_order_service：
                       1、保存订单信息
                       2、保存本地消息记录
                       3、向MQ Server发送转账消息
                       4、在MQ Server响应返回后更新本地消息为已成功发送状态
                usian_item_service：
                       1、接收消息，扣减库存
                       2、向MQ Server发送应答状态
                       3、对扣减库存方法做幂等
            3.2、创建数据库
                在数据库中新增local_message，本地消息记录表(初始化状态为发送失败)，用于保证上游服务把消息成功发送。
                在数据库中新增de_duplication，去重表，用于交易幂等控制。



